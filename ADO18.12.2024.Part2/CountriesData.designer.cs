#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADO18._12._2024.Part2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Storage")]
	public partial class CountriesDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCountries(Countries instance);
    partial void UpdateCountries(Countries instance);
    partial void DeleteCountries(Countries instance);
    #endregion
		
		public CountriesDataDataContext() : 
				base(global::ADO18._12._2024.Part2.Properties.Settings.Default.StorageConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CountriesDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountriesDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountriesDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CountriesDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Countries> Countries
		{
			get
			{
				return this.GetTable<Countries>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Countries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameCountry;
		
		private string _NameCapital;
		
		private System.Nullable<int> _CountPeople;
		
		private System.Nullable<double> _Area;
		
		private string _PartOfWolrd;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameCountryChanging(string value);
    partial void OnNameCountryChanged();
    partial void OnNameCapitalChanging(string value);
    partial void OnNameCapitalChanged();
    partial void OnCountPeopleChanging(System.Nullable<int> value);
    partial void OnCountPeopleChanged();
    partial void OnAreaChanging(System.Nullable<double> value);
    partial void OnAreaChanged();
    partial void OnPartOfWolrdChanging(string value);
    partial void OnPartOfWolrdChanged();
    #endregion
		
		public Countries()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCountry", DbType="NVarChar(20)")]
		public string NameCountry
		{
			get
			{
				return this._NameCountry;
			}
			set
			{
				if ((this._NameCountry != value))
				{
					this.OnNameCountryChanging(value);
					this.SendPropertyChanging();
					this._NameCountry = value;
					this.SendPropertyChanged("NameCountry");
					this.OnNameCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCapital", DbType="NVarChar(20)")]
		public string NameCapital
		{
			get
			{
				return this._NameCapital;
			}
			set
			{
				if ((this._NameCapital != value))
				{
					this.OnNameCapitalChanging(value);
					this.SendPropertyChanging();
					this._NameCapital = value;
					this.SendPropertyChanged("NameCapital");
					this.OnNameCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountPeople", DbType="Int")]
		public System.Nullable<int> CountPeople
		{
			get
			{
				return this._CountPeople;
			}
			set
			{
				if ((this._CountPeople != value))
				{
					this.OnCountPeopleChanging(value);
					this.SendPropertyChanging();
					this._CountPeople = value;
					this.SendPropertyChanged("CountPeople");
					this.OnCountPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Float")]
		public System.Nullable<double> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartOfWolrd", DbType="NVarChar(20)")]
		public string PartOfWolrd
		{
			get
			{
				return this._PartOfWolrd;
			}
			set
			{
				if ((this._PartOfWolrd != value))
				{
					this.OnPartOfWolrdChanging(value);
					this.SendPropertyChanging();
					this._PartOfWolrd = value;
					this.SendPropertyChanged("PartOfWolrd");
					this.OnPartOfWolrdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
